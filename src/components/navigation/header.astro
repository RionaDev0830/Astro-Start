---
import Wrapper from "../Common/Wrapper.astro";
import MobileNav from './MobileNav.astro';
import { Image } from 'astro:assets';
import { header } from "../../../data/navigation.json";
import Icon from "../utility/Icon.jsx";
interface Props {
  headerStyleOverrides: {
    background_color: string;
    text_color: string;
    hover_text_color: string;
    alternate_logo: {
      image_path: string;
      logo_alt_text: string;
    };
  };
}

// Sort out whether values are overridden by the hero at the top of the page,
// Or use the values set in the site-wide data/navigation.json data file
const headerStyleOverrides = Astro.props.headerStyleOverrides;
const backgroundColor =
  headerStyleOverrides?.background_color ?? header.background_color;
const linkTextColor = headerStyleOverrides?.text_color ?? header.text_color;
const linkHoverColor =
  headerStyleOverrides?.hover_text_color ?? header.hover_text_color;
const logoImagePath =
  headerStyleOverrides?.alternate_logo?.image_path ?? header.logo;
const logoAltText =
  headerStyleOverrides?.alternate_logo?.logo_alt_text ?? header.logo_alt_text;

let showSubMenu = -1;
let showMobileNav = false;
function toggleSubMenu(mIndex) {
  if ( showSubMenu == mIndex) {
    showSubMenu = -1;
  } else {
    showSubMenu = mIndex;
  }
}
function onMouseEnter(mIndex) {
  showSubMenu = mIndex;
}
function onMouseLeave() {
  showSubMenu = -1;
}

---

<header
  class=""
  x-data="{ open: false }"
  x-transition
  style={`background-color: ${backgroundColor}; color: ${linkTextColor};`}
>
  <div class="nav_bar">
    <Wrapper>
      <div class="header_container">
        <a href="/">
          <Image
            class="logo_container"
            src="/loyal.logo.cdr.svg"
            alt="Company Logo"
            width={140}
            height={100}
          />
        </a>
        <div class="option_container">
          {
            header.links.map((item, idx) =>
              item.is_dropdown ? (
                <div
                  class ="option dropdown"
                  onMouseEnter={() => onMouseEnter(idx)}
                  onMouseLeave={onMouseLeave}
                >
                  {item.text} 
                  {item.icon && (
                    <Image
                      src={item.icon}
                      alt="arrow down"
                      width={15}
                      height={15}
                      style="margin-feft: 4px"
                    />
                  )}
                  {
                    item.is_dropdown && 
                      <ul class={`dropdown_menu ${showSubMenu == idx ? 'clicked': ''}`}>
                        {
                          item.submenu.length && item.submenu.map((sItem) => 
                            <li>
                              <a class={`${sItem.cName}`} href={sItem.link}
                                onclick={toggleSubMenu(idx)}>{sItem.text} </a>
                            </li>
                          )
                        }
                      </ul>
                  }
                </div>
              ) : (
                <a key={idx} href={item.link} class="option">
                  {item.text}
                </a>
              ),
            )
          }
          <button type="button" class="mobile_option" 
            onClick={() => handleToogleNav()}
          >
            <Image
              src="/burger-menu.svg"
              alt="burger menu"
              width={30}
              height={30}
            />
          </button>
        </div>
      </div>
    </Wrapper>
  </div>
  {showMobileNav && <MobileNav items={header.links} />}
</header>

<style define:vars={{ linkHoverColor }}>
.header_container {
	 display: flex;
	 justify-content: space-between;
	 align-items: center;
	 padding-top: 10px;
}
 .scrolled {
	 box-shadow: rgba(0, 0, 0, 0.25) 2.4px 2.4px 3.2px;
}

 .option_container {
	 display: flex;
	 gap: 8px;
	 align-items: center;
}
 .option {
	 font-family: var(--font-dm-Sans);
	 font-size: 16px;
	 font-weight: 600;
	 line-height: 20.83px;
	 padding: 28px 10px;
	 border-bottom: 4px solid transparent;
}
 .option:hover {
	 border-bottom: 4px solid #0697db;
}
 .dropdown {
	 cursor: default;
	 display: inline-flex;
}
.dropdown:hover .dropdown_menu {
  display: block;
}
 .dropdown_menu {
  display: none;
	 position: absolute;
	 z-index: 2;
	 top: 85px;
	 list-style: none;
	 text-align: start;
	 text-transform: none;
	 font-size: 20px;
	 margin-left: -15px;
	 padding: 0;
	 box-shadow: rgba(0, 0, 0, 0.3) 0px 19px 38px, rgba(0, 0, 0, 0.22) 0px 15px 12px;
}
 .dropdown_menu li {
	 background-color: rgba(103, 108, 104, 0.8);
	 cursor: pointer;
	 background: white;
}
 .dropdown_menu .dropdown-menu.active {
	 padding: 16px 0 16px 16px;
}
 .dropdown_menu .dropdown-menu.clicked {
	 display: none;
}
 .dropdown_menu .dropdown-link {
	 display: block;
	 width: 180px;
	 height: 100%;
	 text-decoration: none;
	 color: black;
	 padding: 16px;
	 font-size: 18px;
	 font-weight: 400;
}
 .dropdown_menu .dropdown-link:hover {
	 color: #004890;
}
 .dropdown_menu .dropdown-link.active {
	 color: white;
	 background-color: #778581;
}
 .dropdown_menu .dropdown-link.active:hover {
	 background-color: #799c92;
}
 .active {
	 border-bottom: 4px solid #0697db;
}
 .search_option {
	 padding: 28px 10px;
}
 .nav_bar {
	 position: fixed;
	 z-index: 10;
	 background: #fff;
	 width: 100%;
}
 .mobile_option {
	 display: none;
}
 @media (max-width: 1350px) {
	 .option {
		 padding: 24px 5px;
	}
	 .search_option {
		 padding: 24px 5px;
	}
}
 @media (max-width: 1100px) {
	 .option_container {
		 gap: 3px;
	}
	 .logo_container {
		 height: 80px;
		 width: 130px;
	}
	 .option {
		 padding: 13px 5px;
	}
	 .search_option {
		 padding: 13px 5px;
	}
}
 @media (max-width: 820px) {
	 .mobile_option {
		 display: block;
		 padding: 4px 10px;
		/* z-index: 9999;
		 */
		/* outline: #e90000;
		 */
		 border: 1.5px solid #ddd;
		 border-radius: 3px;
		 background-color: #fff;
	}
	 .search_option {
		 display: none;
	}
	 .option {
		 display: none;
	}
}
 

</style>
<script>
  let showMobileNav = false;
  document.getElementsByClassName('mobile_option')[0].addEventListener('click', () => {
    showMobileNav = !showMobileNav;
  })
</script>